[{"path":"https://mjskay.github.io/ggblend/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ggblend authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mjskay.github.io/ggblend/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Kay. Author, maintainer.","code":""},{"path":"https://mjskay.github.io/ggblend/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kay M (2023). ggblend: Blending Compositing Algebra 'ggplot2'. https://mjskay.github.io/ggblend/, https://github.com/mjskay/ggblend/.","code":"@Manual{,   title = {ggblend: Blending and Compositing Algebra for 'ggplot2'},   author = {Matthew Kay},   year = {2023},   note = {https://mjskay.github.io/ggblend/, https://github.com/mjskay/ggblend/}, }"},{"path":"https://mjskay.github.io/ggblend/index.html","id":"ggblend-blending-and-compositing-algebra-for-ggplot2","dir":"","previous_headings":"","what":"Blending and Compositing Algebra for ggplot2","title":"Blending and Compositing Algebra for ggplot2","text":"ggblend small algebra operations blending, copying, adjusting, compositing layers ggplot2. allows easily copy adjust aesthetics parameters existing layer, partition layer multiple pieces re-composition, combine layers (partitions layers) using blend modes (like \"multiply\", \"overlay\", etc). ggblend requires R ≥ 4.2, blending compositing support added version R.","code":""},{"path":"https://mjskay.github.io/ggblend/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Blending and Compositing Algebra for ggplot2","text":"can install development version ggblend using:","code":"remotes::install_github(\"mjskay/ggblend\")"},{"path":"https://mjskay.github.io/ggblend/index.html","id":"blending-within-one-geometry","dir":"","previous_headings":"","what":"Blending within one geometry","title":"Blending and Compositing Algebra for ggplot2","text":"’ll construct simple dataset two semi-overlapping point clouds. ’ll two versions dataset: one \"\" points listed first, one \"b\" points listed first. typical scatterplot data suffers problem many points appear group depends drawing order (b versus b ):  commutative blend mode, like \"multiply\" \"darken\", one potential solution depend drawing order. can apply blend() operation geom_point()` achieve . three ways : blend(geom_point(...), \"multiply\") (normal function application) geom_point(...) |> blend(\"multiply\") (piping) geom_point(...) * blend(\"multiply\") (algebraic operations) Function application piping equivalent. case, three approaches equivalent. see later, multiplication approach useful want shorthand applying operation multiple layers list without combining layers first (words, multiplication operations layers distributive algebraic sense).  Now output identical matter draw order, although output quite dark.","code":"library(ggplot2) library(ggblend) theme_set(ggdist::theme_ggdist() + theme(   plot.title = element_text(size = rel(1), lineheight = 1.1, face = \"bold\"),   plot.subtitle = element_text(face = \"italic\"),   panel.border = element_rect(color = \"gray75\", fill = NA) ))  set.seed(1234) df_a = data.frame(x = rnorm(500, 0), y = rnorm(500, 1), set = \"a\") df_b = data.frame(x = rnorm(500, 1), y = rnorm(500, 2), set = \"b\")  df_ab = rbind(df_a, df_b) |>   transform(order = \"draw a then b\")  df_ba = rbind(df_b, df_a) |>   transform(order = \"draw b then a\")  df = rbind(df_ab, df_ba) df |>   ggplot(aes(x, y, color = set)) +   geom_point(size = 3, alpha = 0.5) +   scale_color_brewer(palette = \"Set1\") +   facet_grid(~ order) +   labs(title = \"geom_point() without blending\", subtitle = \"Draw order matters.\") df |>   ggplot(aes(x, y, color = set)) +   geom_point(size = 3, alpha = 0.5) |> blend(\"multiply\") +   scale_color_brewer(palette = \"Set1\") +   facet_grid(~ order) +   labs(     title = \"geom_point(alpha = 0.5) |> blend('multiply')\",     subtitle = \"Draw order does not matter, but color is too dark.\"   )"},{"path":"https://mjskay.github.io/ggblend/index.html","id":"partitioning-layers","dir":"","previous_headings":"","what":"Partitioning layers","title":"Blending and Compositing Algebra for ggplot2","text":"Part reason output dark points multiply-blended together. many objects (, individual points) multiply-blended top , output tends get dark quickly. However, really need two sets multiply-blended . Within set, can use regular alpha blending. , can partition geometry set blend. partition blended normally within set, resulting sets multiply-blended together just :  ’s getting : points outside intersection two sets look good, intersection still bit dark. Let’s try combining two blend modes address : ’ll use \"lighten\" blend mode (also commutative) make overlapping regions lighter, draw \"multiply\"-blended version top alpha less 1:  Now ’s little easier see overlap density, output remains independent draw order. However, little verbose need copy layer multiple times: can simplify two ways: first, partition(vars(set)) equivalent setting aes(partition = set), can move partition specification global plot aesthetics, since every layer. Second, operations layers ggblend act small algebra. Operations sums operations can multiplied layers lists layers, operations distributed layers (* |> differ: |> distribute operations like blend() layers, useful want use blend combine multiple layers together, rather applying blend layer individually). Thus, can “factor ” geom_point(size = 3, alpha = 0.5) expression, yielding : expressions equivalent. Thus can rewrite previous example like :","code":"df |>   ggplot(aes(x, y, color = set)) +   geom_point(size = 3, alpha = 0.5) |> partition(vars(set)) |> blend(\"multiply\") +   scale_color_brewer(palette = \"Set1\") +   facet_grid(~ order) +   labs(     title = \"geom_point(alpha = 0.5) |> partition(vars(set)) |> blend('multiply')\",     subtitle = \"Light outside the intersection, but still dark inside the intersection.\"   ) df |>   ggplot(aes(x, y, color = set)) +   geom_point(size = 3, alpha = 0.5) |> partition(vars(set)) |> blend(\"lighten\") +   geom_point(size = 3, alpha = 0.5) |> partition(vars(set)) |> blend(\"multiply\", alpha = 0.5) +   scale_color_brewer(palette = \"Set1\") +   facet_grid(~ order) +   labs(     title =        \"geom_point(size = 3, alpha = 0.5) |> partition(vars(set)) |> blend('lighten') + \\ngeom_point(size = 3, alpha = 0.5) |> partition(vars(set)) |> blend('multiply', alpha = 0.5)\",     subtitle = 'A good compromise, but a long specification.'   ) +   theme(plot.subtitle = element_text(lineheight = 1.2)) geom_point(size = 3, alpha = 0.5) |> partition(vars(set)) * blend(\"lighten\") + geom_point(size = 3, alpha = 0.5) |> partition(vars(set)) * blend(\"multiply\", alpha = 0.5) + geom_point(size = 3, alpha = 0.5) * (blend(\"lighten\") + blend(\"multiply\", alpha = 0.5)) df |>   ggplot(aes(x, y, color = set, partition = set)) +   geom_point(size = 3, alpha = 0.5) * (blend(\"lighten\") + blend(\"multiply\", alpha = 0.5)) +   scale_color_brewer(palette = \"Set1\") +   facet_grid(~ order) +   labs(     title = \"aes(partition = set) + geom_point(alpha = 0.5) * (blend('lighten') + blend('multiply', alpha = 0.5))\",     subtitle = \"Two order-independent blends on one layer using the distributive law.\"   ) +   theme(plot.subtitle = element_text(lineheight = 1.2))"},{"path":"https://mjskay.github.io/ggblend/index.html","id":"blending-multiple-geometries","dir":"","previous_headings":"","what":"Blending multiple geometries","title":"Blending and Compositing Algebra for ggplot2","text":"can also blend geometries together passing list geometries blend(). lists can include already-blended geometries:  Whoops!! look closely, blending geom_point() layers appears changed. Recall expression: equivalent specifying two separate layers, one blend(\"lighten\") blend(\"multiply\", alpha = 0.65)). Thus, apply |> blend(\"hard.light\") list() layers, use hard light blend mode blend two layers together, previously blended using normal (\"\") blend mode. can gain back original appearance blending two layers together |> blend() prior applying hard light blend:","code":"df |>   ggplot(aes(x, y, color = set, partition = set)) +   list(     geom_point(size = 3, alpha = 0.5) * (blend(\"lighten\") + blend(\"multiply\", alpha = 0.5)),     geom_vline(xintercept = 0, color = \"gray75\", linewidth = 1.5),     geom_hline(yintercept = 0, color = \"gray75\", linewidth = 1.5)   ) |> blend(\"hard.light\") +   scale_color_brewer(palette = \"Set1\") +   facet_grid(~ order) +   labs(     title = \"Blending multiple geometries together in a list\",     subtitle = \"Careful! The point layer blend is incorrect!\"   ) geom_point(size = 3, alpha = 0.5) * (blend(\"lighten\") + blend(\"multiply\", alpha = 0.5)) df |>   ggplot(aes(x, y, color = set, partition = set)) +   list(     geom_point(size = 3, alpha = 0.5) * (blend(\"lighten\") + blend(\"multiply\", alpha = 0.5)) |> blend(),     geom_vline(xintercept = 0, color = \"gray75\", linewidth = 1.5),     geom_hline(yintercept = 0, color = \"gray75\", linewidth = 1.5)   ) |> blend(\"hard.light\") +   scale_color_brewer(palette = \"Set1\") +   facet_grid(~ order) +   labs(title = \"Blending multiple geometries together\")"},{"path":"https://mjskay.github.io/ggblend/index.html","id":"partitioning-and-blending-lineribbons","dir":"","previous_headings":"","what":"Partitioning and blending lineribbons","title":"Blending and Compositing Algebra for ggplot2","text":"Another case ’s useful finer-grained control blending within given geometry drawing overlapping uncertainty bands. , ’ll show use blend() stat_lineribbon() ggdist create overlapping gradient ribbons depicting uncertainty. ’ll fit model: generate confidence distributions mean using distributional: basic plot based examples vignette(\"freq-uncertainty-vis\", package = \"ggdist\") vignette(\"lineribbon\", package = \"ggdist\") may issues lineribbons overlap:  Notice overlap orange (cyl = 6) purple (cyl = 8) lines. add partition = cyl aesthetic mapping, can blend geometries different levels cyl together blend() call around ggdist::stat_lineribbon(). many ways add partition plot: Add partition = cyl existing aes(...) call. However, leaves partitioning information far call blend(), relationship less clear. Add aes(partition = cyl) stat_lineribbon(...) call. localized change (better!), raise warning stat_lineribbon() recognized partition aesthetic. Add |> adjust(aes(partition = cyl)) stat_lineribbon(...) add partition aesthetic (bypass warning). Add |> partition(vars(cyl)) stat_lineribbon(...) add partition aesthetic. alias adjust() approach intended clearer. takes specification partition similar facet_wrap(): either one-sided formula call vars(). Let’s try fourth approach:  Now overlapping ribbons blended together.","code":"m_mpg = lm(mpg ~ hp * cyl, data = mtcars) predictions = unique(mtcars[, c(\"cyl\", \"hp\")])  predictions$mu_hat = with(predict(m_mpg, newdata = predictions, se.fit = TRUE),    distributional::dist_student_t(df = df, mu = fit, sigma = se.fit) )  predictions ##                     cyl  hp                     mu_hat ## Mazda RX4             6 110 t(28, 20.28825, 0.7984429) ## Datsun 710            4  93 t(28, 25.74371, 0.8818612) ## Hornet Sportabout     8 175 t(28, 15.56144, 0.8638133) ## Valiant               6 105 t(28, 20.54952, 0.8045354) ## Duster 360            8 245 t(28, 14.66678, 0.9773475) ## Merc 240D             4  62   t(28, 28.58736, 1.21846) ## Merc 230              4  95 t(28, 25.56025, 0.9024699) ## Merc 280              6 123  t(28, 19.60892, 0.842354) ## Merc 450SE            8 180 t(28, 15.49754, 0.8332276) ## Cadillac Fleetwood    8 205 t(28, 15.17801, 0.7674501) ## Lincoln Continental   8 215 t(28, 15.05021, 0.7866649) ## Chrysler Imperial     8 230 t(28, 14.85849, 0.8606705) ## Fiat 128              4  66   t(28, 28.22044, 1.12188) ## Honda Civic           4  52  t(28, 29.50466, 1.491467) ## Toyota Corolla        4  65  t(28, 28.31217, 1.145154) ## Toyota Corona         4  97 t(28, 25.37679, 0.9280143) ## Dodge Challenger      8 150  t(28, 15.88096, 1.077004) ## Porsche 914-2         4  91 t(28, 25.92718, 0.8665404) ## Lotus Europa          4 113   t(28, 23.9091, 1.262843) ## Ford Pantera L        8 264  t(28, 14.42394, 1.166062) ## Ferrari Dino          6 175  t(28, 16.89163, 1.550885) ## Maserati Bora         8 335   t(28, 13.5165, 2.045807) ## Volvo 142E            4 109  t(28, 24.27603, 1.162526) predictions |>   ggplot(aes(x = hp, fill = ordered(cyl), color = ordered(cyl))) +   ggdist::stat_lineribbon(     aes(ydist = mu_hat, fill_ramp = after_stat(.width)),     .width = ppoints(40)   ) +   geom_point(aes(y = mpg), data = mtcars) +   scale_fill_brewer(palette = \"Set2\") +   scale_color_brewer(palette = \"Dark2\") +   ggdist::scale_fill_ramp_continuous(range = c(1, 0)) +   labs(     title = \"ggdist::stat_lineribbon()\",     subtitle = \"Overlapping lineribbons obscure each other.\",      color = \"cyl\", fill = \"cyl\", y = \"mpg\"   ) predictions |>   ggplot(aes(x = hp, fill = ordered(cyl), color = ordered(cyl))) +   ggdist::stat_lineribbon(     aes(ydist = mu_hat, fill_ramp = after_stat(.width)),     .width = ppoints(40)   ) |> partition(vars(cyl)) |> blend(\"multiply\") +   geom_point(aes(y = mpg), data = mtcars) +   scale_fill_brewer(palette = \"Set2\") +   scale_color_brewer(palette = \"Dark2\") +   ggdist::scale_fill_ramp_continuous(range = c(1, 0)) +   labs(     title = \"ggdist::stat_lineribbon() |> partition(vars(cyl)) |> blend('multiply')\",     subtitle = \"Overlapping lineribbons blend together independent of draw order.\",     color = \"cyl\", fill = \"cyl\", y = \"mpg\"   )"},{"path":"https://mjskay.github.io/ggblend/index.html","id":"highlighting-geoms-using-copy_under","dir":"","previous_headings":"","what":"Highlighting geoms using copy_under()","title":"Blending and Compositing Algebra for ggplot2","text":"common visualization technique make layer salient (especially presence many competing layers) add small outline around . geometries (like geom_point()) easy; others (like geom_line()), ’s easy way without manually copying layer. ggblend’s layer algebra makes straightforward using adjust() operation combined operator addition multiplication. example, given layer like: add white outline, might want something like: However, ’d rather write geom_line() specification twice factor differences first second layer, can use adjust() operation (lets change aesthetics paremeters layer) along distributive law factor geom_line(linewidth = 1) write specification : copy_under(...) operation, synonym adjust(...) + 1, also implements pattern: ’s example highlighting fit lines previous lineribbon example:  Note implementation copy_under(...) simply synonym adjust(...) + 1; can see look copy_under() : fact, particularly useful, addition multiplication layer operations expanded appropriately: hesitate imagine feature might useful …","code":"geom_line(linewidth = 1) geom_line(color = \"white\", linewidth = 2) + geom_line(linewidth = 1) geom_line(linewidth = 1) * (adjust(color = \"white\", linewidth = 2) + 1) geom_line(linewidth = 1) * copy_under(color = \"white\", linewidth = 2) predictions |>   ggplot(aes(x = hp, fill = ordered(cyl), color = ordered(cyl))) +   ggdist::stat_ribbon(     aes(ydist = mu_hat, fill_ramp = after_stat(.width)),     .width = ppoints(40)   ) |> partition(vars(cyl)) |> blend(\"multiply\") +   geom_line(aes(y = median(mu_hat)), linewidth = 1) |> copy_under(color = \"white\", linewidth = 2) +   geom_point(aes(y = mpg), data = mtcars) +   scale_fill_brewer(palette = \"Set2\") +   scale_color_brewer(palette = \"Dark2\") +   ggdist::scale_fill_ramp_continuous(range = c(1, 0)) +   labs(     title = \"geom_line() |> copy_under(color = 'white', linewidth = 2)\",      subtitle = \"Highlights the line layer without manually copying its specification.\",     color = \"cyl\", fill = \"cyl\", y = \"mpg\"   ) copy_under() ## <operation>: (adjust() + 1) (adjust() + 3) * 2 ## <operation>: (adjust() + 1 + 1 + 1 + adjust() + 1 + 1 + 1)"},{"path":"https://mjskay.github.io/ggblend/index.html","id":"compatibility-with-other-packages","dir":"","previous_headings":"","what":"Compatibility with other packages","title":"Blending and Compositing Algebra for ggplot2","text":"theory ggblend compatible packages, though complex cases (blending lists geoms using partition aesthetic) possible may fail, features bit hackish. hard test, three features applied modified version Gapminder example used gganimate documentation:","code":"library(gganimate) library(gapminder)  p = ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, partition = continent)) +   list(     geom_point(show.legend = c(size = FALSE)) |> blend(\"multiply\"),     geom_hline(yintercept = 70, linewidth = 2.5, color = \"gray75\")   ) |> blend(\"hard.light\") +   scale_color_manual(values = continent_colors) +   scale_size(range = c(2, 12)) +   scale_x_log10() +   labs(     title = 'Gapminder with gganimate and ggblend',      subtitle = 'Year: {frame_time}',      x = 'GDP per capita',      y = 'life expectancy'   ) +   transition_time(year) +   ease_aes('linear')  animate(p, type = \"cairo\")"},{"path":"https://mjskay.github.io/ggblend/reference/adjust.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust layer params and aesthetics (Layer operation) — adjust","title":"Adjust layer params and aesthetics (Layer operation) — adjust","text":"layer operation adjusting params aesthetic mappings layer-like object.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/adjust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust layer params and aesthetics (Layer operation) — adjust","text":"","code":"adjust(object, mapping = aes(), ...)"},{"path":"https://mjskay.github.io/ggblend/reference/adjust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust layer params and aesthetics (Layer operation) — adjust","text":"object One : layer-like object: applies operation layer. missing argument: creates operation Anything else: creates operation, passing object along mapping argument mapping aesthetic created using aes(). Mappings provided overwrite mappings ggplot2::layer()s operation applied . ... ggplot2::layer() parameters, passed geom_...() stat_...() call. Params provided overwrite params layers operation applied .","code":""},{"path":"https://mjskay.github.io/ggblend/reference/adjust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust layer params and aesthetics (Layer operation) — adjust","text":"layer-like object (object layer-like) operation ().","code":""},{"path":[]},{"path":"https://mjskay.github.io/ggblend/reference/adjust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust layer params and aesthetics (Layer operation) — adjust","text":"","code":"library(ggplot2)  # Here we use adjust() with nop() ( + 1) to create a copy of # the stat_smooth layer, putting a white outline around it. set.seed(1234) k = 1000 data.frame(   x = seq(1, 10, length.out = k),   y = rnorm(k, seq(1, 2, length.out = k) + c(0, 0.5)),   g = c(\"a\", \"b\") ) |>   ggplot(aes(x, y, color = g)) +   geom_point() +   stat_smooth(method = lm, formula = y ~ x, linewidth = 1.5, se = FALSE) *     (adjust(aes(group = g), color = \"white\", linewidth = 4) + 1) +   scale_color_brewer(palette = \"Dark2\")   # (note this could also be done with copy_under())"},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"Transform objects within single layer (geom) across multiple layers (geoms) using affine transformations, like translation, scale, rotation. Uses built-compositing support graphical devices added R 4.2.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"","code":"affine_transform(object, x = 0, y = 0, width = 1, height = 1, angle = 0)"},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"object One : layer-like object: applies operation layer. missing argument: creates operation numeric() unit() giving x-axis translation, takes place x argument. x numeric() unit() giving x translation apply. y numeric() unit() giving y translation apply. width numeric() unit() giving width. height numeric() unit() giving height. angle numeric() giving angle rotate, degrees.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"layer-like object (object layer-like) operation ().","code":""},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"Applies affine transformation (translation, scaling, rotation) layer. Note: due limitations implementation scaling rotation, currently operations can performed relative center plot. future versions, translation rotation origin may configurable.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":"supported-devices","dir":"Reference","previous_headings":"","what":"Supported devices","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"Transformation currently supported graphics devices. writing, least png(type = \"cairo\"), svg(), cairo_pdf() known support blending. affine_transform() attempts auto-detect support affine transformation using dev.capabilities(). may receive warning using affine_transform() appears transformation supported current graphics device. warning either means (1) graphics device support transformation (case switch one ) (2) graphics device supports transformation incorrectly reports . Unfortunately, graphics devices support transformation appear correctly report support transformation, even auto-detection fails, blend() still attempt apply transformation, just case. warning issued output still correctly transformed, likely bug graphics device. can report bug authors graphics device wish; mean time, can use options(ggblend.check_affine_transform = FALSE) disable check.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"Murrell, Paul (2021): Groups, Compositing Operators, Affine Transformations R Graphics. University Auckland. Report. doi:10.17608/k6.auckland.17009120.v1 .","code":""},{"path":[]},{"path":"https://mjskay.github.io/ggblend/reference/affine_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate, scale, and rotate ggplot2 layers (Layer operation) — affine_transform","text":"","code":"old_options = options(ggblend.check_affine_transform = FALSE) set.seed(1234)  # a simple dataset: data.frame(x = rnorm(100), y = rnorm(100)) |>   ggplot(aes(x, y)) +   geom_point() +   xlim(-5, 5)   # we could scale and translate copies of the point cloud # (though I'm not sure why...) data.frame(x = rnorm(100), y = rnorm(100)) |>   ggplot(aes(x, y)) +   geom_point() * (     affine_transform(x = -unit(100, \"pt\"), width = 0.5) |> adjust(color = \"red\") +     affine_transform(width = 0.5) +     affine_transform(x = unit(100, \"pt\"), width = 0.5) |> adjust(color = \"blue\")   ) +   xlim(-5, 5)  options(old_options)"},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":null,"dir":"Reference","previous_headings":"","what":"Blend ggplot2 layers (Layer operation) — blend","title":"Blend ggplot2 layers (Layer operation) — blend","text":"Blend objects within single layer (geom) across multiple layers (geoms) using graphical blending modes, \"multiply\", \"overlay\", etc. Uses built-compositing support graphical devices added R 4.2.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blend ggplot2 layers (Layer operation) — blend","text":"","code":"blend(object, blend = \"over\", alpha = 1)"},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blend ggplot2 layers (Layer operation) — blend","text":"object One : layer-like object: applies operation layer. missing argument: creates operation string (character vector length 1) giving name blend, takes place blend argument. blend blend mode use. default mode, \"\", corresponds \"usual\" blend mode drawing objects top . list supported blend modes depends graphical device (see Murrell 2021), listed dev.capabilities()$compositing. Blend modes can include: \"clear\", \"source\", \"\", \"\", \"\", \"atop\", \"dest\", \"dest.\", \"dest.\", \"dest.\", \"dest.atop\", \"xor\", \"add\", \"saturate\", \"multiply\", \"screen\", \"overlay\", \"darken\", \"lighten\", \"color.dodge\", \"color.burn\", \"hard.light\", \"soft.light\", \"difference\", \"exclusion\" Blend modes like \"multiply\", \"darken\", \"lighten\" particularly useful commutative: result whichever order applied . warning issued current graphics device appear support requested blend mode. cases warning may spurious, can disabled setting options(ggblend.check_blend = FALSE). alpha numeric 0 1 (inclusive). opacity transparency mask applied objects prior blending.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blend ggplot2 layers (Layer operation) — blend","text":"layer-like object (object layer-like) operation ().","code":""},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blend ggplot2 layers (Layer operation) — blend","text":"object single layer / geometry partition aesthetic set, every graphical object (grob()) output geometry blended together using blend blend mode. alpha != 1, transparency mask provided alpha level applied grob blending. object single layer / geometry partition aesthetic set, geometry rendered subset data defined partition aesthetic, transparency mask provided alpha level applied resulting group whole (alpha != 1), groups blended together using blend blend mode. object list layers / geometries, layers rendered separately, transparency mask provided alpha level applied layer whole (alpha != 1), layers blended together using blend blend mode. blend() multiplied list layers using *, acts layer individually (layer passed blend()).","code":""},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":"supported-devices","dir":"Reference","previous_headings":"","what":"Supported devices","title":"Blend ggplot2 layers (Layer operation) — blend","text":"Blending currently supported graphics devices. writing, least png(type = \"cairo\"), svg(), cairo_pdf() known support blending. blend() attempts auto-detect support blending using dev.capabilities(). may receive warning using blend() appears blending supported current graphics device. warning either means (1) graphics device support blending (case switch one ) (2) graphics device supports blending incorrectly reports . Unfortunately, graphics devices support blending appear correctly report support blending, even auto-detection fails, blend() still attempt apply blend, just case. warning issued output still correctly blended, likely bug graphics device. can report bug authors graphics device wish; mean time, can use options(ggblend.check_blend = FALSE) disable check.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Blend ggplot2 layers (Layer operation) — blend","text":"Murrell, Paul (2021): Groups, Compositing Operators, Affine Transformations R Graphics. University Auckland. Report. doi:10.17608/k6.auckland.17009120.v1 .","code":""},{"path":[]},{"path":"https://mjskay.github.io/ggblend/reference/blend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blend ggplot2 layers (Layer operation) — blend","text":"","code":"old_options = options(ggblend.check_blend = FALSE) library(ggplot2)  # create two versions of a dataset, where draw order can affect output set.seed(1234) df_a = data.frame(x = rnorm(500, 0), y = rnorm(500, 1), set = \"a\") df_b = data.frame(x = rnorm(500, 1), y = rnorm(500, 2), set = \"b\") df_ab = rbind(df_a, df_b) |>   transform(order = \"draw a then b\") df_ba = rbind(df_b, df_a) |>   transform(order = \"draw b then a\") df = rbind(df_ab, df_ba)  # Using the \"darken\" blend mode, draw order does not matter: df |>   ggplot(aes(x, y, color = set)) +   geom_point(size = 3) |> blend(\"darken\") +   scale_color_brewer(palette = \"Set2\") +   facet_grid(~ order) #> Warning: Group definition failed #> Warning: Group definition failed   # Using the \"multiply\" blend mode, we can see density within groups: df |>   ggplot(aes(x, y, color = set)) +   geom_point(size = 3) |> blend(\"multiply\") +   scale_color_brewer(palette = \"Set2\") +   facet_grid(~ order) #> Warning: Group definition failed #> Warning: Group definition failed   # blend() on a single geom by default blends all grobs in that geom together # using the requested blend mode. If we wish to blend within specific data # subsets using normal blending (\"over\") but between subsets using the # requested blend mode, we can set the partition aesthetic. This will # make \"multiply\" behave more like \"darken\": df |>   ggplot(aes(x, y, color = set, partition = set)) +   geom_point(size = 3) |> blend(\"multiply\") +   scale_color_brewer(palette = \"Set2\") +   facet_grid(~ order) #> Warning: Group definition failed #> Warning: Group definition failed   # We can also blend lists of geoms together; these geoms are rendered using # normal (\"over\") blending (unless a blend() call is applied to a specific # sub-layer, as in the first layer below) and then blended together using # the requested blend mode. df |>   ggplot(aes(x, y, color = set)) +   list(     geom_point(size = 3) |> blend(\"darken\"),     geom_vline(xintercept = 0, color = \"gray75\", linewidth = 1.5),     geom_hline(yintercept = 0, color = \"gray75\", linewidth = 1.5)   ) |> blend(\"hard.light\") +   scale_color_brewer(palette = \"Set2\") +   facet_grid(~ order) #> Warning: Group definition failed #> Warning: Group definition failed  options(old_options)"},{"path":"https://mjskay.github.io/ggblend/reference/copy.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy layers then adjust params and aesthetics (Layer operation) — copy","title":"Copy layers then adjust params and aesthetics (Layer operation) — copy","text":"layer operation copying adjusting params aesthetic mappings layer-like object.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/copy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy layers then adjust params and aesthetics (Layer operation) — copy","text":"","code":"copy_over(object, mapping = aes(), ...)  copy_under(object, mapping = aes(), ...)"},{"path":"https://mjskay.github.io/ggblend/reference/copy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy layers then adjust params and aesthetics (Layer operation) — copy","text":"object One : layer-like object: applies operation layer. missing argument: creates operation Anything else: creates operation, passing object along mapping argument mapping aesthetic created using aes(). Mappings provided overwrite mappings ggplot2::layer()s operation applied . ... ggplot2::layer() parameters, passed geom_...() stat_...() call. Params provided overwrite params layers operation applied .","code":""},{"path":"https://mjskay.github.io/ggblend/reference/copy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy layers then adjust params and aesthetics (Layer operation) — copy","text":"layer-like object (object layer-like) operation ().","code":""},{"path":"https://mjskay.github.io/ggblend/reference/copy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy layers then adjust params and aesthetics (Layer operation) — copy","text":"shortcuts duplicating layer applying adjust(). Specifically: copy_over(...) equivalent 1 + adjust(...) copy_under(...) equivalent adjust(...) + 1","code":""},{"path":[]},{"path":"https://mjskay.github.io/ggblend/reference/copy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy layers then adjust params and aesthetics (Layer operation) — copy","text":"","code":"library(ggplot2)  # here we use copy_under() to create a copy of # the stat_smooth layer, putting a white outline around it. set.seed(1234) k = 1000 data.frame(   x = seq(1, 10, length.out = k),   y = rnorm(k, seq(1, 2, length.out = k) + c(0, 0.5)),   g = c(\"a\", \"b\") ) |>   ggplot(aes(x, y, color = g)) +   geom_point() +   stat_smooth(method = lm, formula = y ~ x, linewidth = 1.5, se = FALSE) *     copy_under(aes(group = g), color = \"white\", linewidth = 4) +   scale_color_brewer(palette = \"Dark2\")"},{"path":"https://mjskay.github.io/ggblend/reference/ggblend-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Blending and compositing for ggplot2 — ggblend-package","title":"Blending and compositing for ggplot2 — ggblend-package","text":"ggblend R package adds support R 4.2 blend modes (e.g. \"multiply\", \"overlay\", etc) ggplot2.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/ggblend-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blending and compositing for ggplot2 — ggblend-package","text":"primary support blending provided blend() function, can used augment ggplot() layers/geoms lists layers/geoms ggplot() specification. example, one can replace something like :   something like :   order apply \"multiply\" blend layer geom_Y(...).","code":"df |>   ggplot(aes(x, y)) +   geom_X(...) +   geom_Y(...) +   geom_Z(...) df |>   ggplot(aes(x, y)) +   geom_X(...) +   geom_Y(...) |> blend(\"multiply\") +   geom_Z(...)"},{"path":"https://mjskay.github.io/ggblend/reference/ggblend-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"Blending and compositing for ggplot2 — ggblend-package","text":"following global options can set using options() modify behavior ggblend: \"ggblend.check_blend\": TRUE (default), blend() warn attempt use blend mode supported current graphics device, reported dev.capabilities()$compositing. Since check can unreliable devices (report support blend mode support), can disable warning setting option FALSE. \"ggblend.check_affine_transform\": TRUE (default), affine_transform() warn attempt use blend mode supported current graphics device, reported dev.capabilities()$transformation. Since check can unreliable devices (report support blend mode support), can disable warning setting option FALSE.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer-like.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 layer-like objects — layer-like","title":"ggplot2 layer-like objects — layer-like","text":"technical reasons related ggplot2 implements layers, single class valid ggplot2 layers lists layers inherit. Thus, ggblend operations supports variety \"layer-like\" objects, documented (see Details).","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer-like.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 layer-like objects — layer-like","text":"","code":"is_layer_like(x)  as_layer_like(x)  # S3 method for default as_layer_like(x)  # S3 method for LayerInstance as_layer_like(x)  # S3 method for list as_layer_like(x)  # S3 method for layer_list as_layer_like(x)"},{"path":"https://mjskay.github.io/ggblend/reference/layer-like.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 layer-like objects — layer-like","text":"x layer-like object. See Details.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer-like.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ggplot2 layer-like objects — layer-like","text":"ggblend operations can applied several ggplot2::layer()-like objects, including: objects class \"LayerInstance\"; e.g. stats geoms. list()s layer-like objects. layer_list()s, typesafe version list()s layer-like objects. Anywhere ggblend function parameter documented layer-like, can object types.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer-like.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"ggplot2 layer-like objects — layer-like","text":"is_layer_like(): checks object layer-like according ggblend. as_layer_like(): validates object layer-like converts \"LayerInstance\" layer_list().","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer-like.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot2 layer-like objects — layer-like","text":"","code":"is_layer_like(geom_line()) #> [1] TRUE is_layer_like(list(geom_line())) #> [1] TRUE is_layer_like(list(geom_line(), scale_x_continuous())) #> [1] TRUE is_layer_like(list(geom_line(), \"abc\")) #> [1] FALSE"},{"path":"https://mjskay.github.io/ggblend/reference/layer_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists of layer-like objects — layer_list","title":"Lists of layer-like objects — layer_list","text":"list layer-like objects, can used layer operations (function application multiplication) added ggplot2() object.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists of layer-like objects — layer_list","text":"","code":"layer_list(...)  as_layer_list(x)  # S3 method for layer_list as_layer_list(x)  # S3 method for list as_layer_list(x)  # S3 method for LayerInstance as_layer_list(x)  # S4 method for layer_list,layer_list +(e1, e2)  # S4 method for layer_list show(object)"},{"path":"https://mjskay.github.io/ggblend/reference/layer_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lists of layer-like objects — layer_list","text":"x, ... layer-like objects object, e1, e2 layer_list()s","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lists of layer-like objects — layer_list","text":"object class \"layer_list\".","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lists of layer-like objects — layer_list","text":"part, users ggblend need worry class. used internally simplify multiple dispatch binary operators, alternative (list()s ggplot2::layer()s) cumbersome. ggblend converts input lists format needed.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/layer_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lists of layer-like objects — layer_list","text":"","code":"library(ggplot2)  # layer_list()s act just like list()s of layer()s in that they can # be added to ggplot() objects data.frame(x = 1:10) |>   ggplot(aes(x, x)) +   layer_list(     geom_line(),     geom_point()   )"},{"path":"https://mjskay.github.io/ggblend/reference/nop.html","id":null,"dir":"Reference","previous_headings":"","what":"Identity (","title":"Identity (","text":"layer operation returns input layer-like object unchanged.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/nop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identity (","text":"","code":"nop(object)"},{"path":"https://mjskay.github.io/ggblend/reference/nop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identity (","text":"object One : layer-like object: applies operation layer. missing argument: creates operation","code":""},{"path":"https://mjskay.github.io/ggblend/reference/nop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identity (","text":"layer-like object (object layer-like) operation ().","code":""},{"path":"https://mjskay.github.io/ggblend/reference/nop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identity (","text":"numeric()s used operations, converted sums nop()s.","code":""},{"path":[]},{"path":"https://mjskay.github.io/ggblend/reference/nop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identity (","text":"","code":"library(ggplot2)  # adding a nop to another operation is equivalent to adding a numeric adjust() + nop() #> <operation>: (adjust() + 1)  # and vice versa adjust() + 2 #> <operation>: (adjust() + 1 + 1)  # here we use adjust() with nop() ( + 1) to create a copy of # the stat_smooth layer, putting a white outline around it. set.seed(1234) k = 1000 data.frame(   x = seq(1, 10, length.out = k),   y = rnorm(k, seq(1, 2, length.out = k) + c(0, 0.5)),   g = c(\"a\", \"b\") ) |>   ggplot(aes(x, y, color = g)) +   geom_point() +   stat_smooth(method = lm, formula = y ~ x, linewidth = 1.5, se = FALSE) *     (adjust(aes(group = g), color = \"white\", linewidth = 4) + 1) +   scale_color_brewer(palette = \"Dark2\")   # (note this could also be done with copy_under())"},{"path":"https://mjskay.github.io/ggblend/reference/operation-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer operations — operation-class","title":"Layer operations — operation-class","text":"Layer operations composable transformations can applied ggplot2 layer-like objects, stats, geoms, lists stats geoms; see layer-like documentation page description valid layer-like objects.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer operations — operation-class","text":"","code":"# S4 method for operation show(object)  # S4 method for operation format(x, ...)  # S4 method for adjust format(x, ...)  # S4 method for affine_transform format(x, ...)  # S4 method for blend format(x, ...)  # S4 method for operation_composition format(x, ...)  # S4 method for nop format(x, ...)  # S4 method for operation_product format(x, ...)"},{"path":"https://mjskay.github.io/ggblend/reference/operation-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer operations — operation-class","text":"x, object operation. ... arguments passed methods.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer operations — operation-class","text":"operations can composed using + * operators (see operation_sum operation_product). Addition multiplication operations layer-like objects obeys distributive law. operations can applied layer-like objects using * |>, slightly different results: Using *, application operations list layer-like objects distributive. example, list(geom_line(), geom_point()) * blend(\"multiply\") equivalent list(geom_line() * blend(\"multiply\"), geom_point() * blend(\"multiply\")); .e. multiply-blends contents two layers individually. Using |>, application operations list layer-like objects distributive (unless reasonable interpretation applying transformation necessarily distributive; e.g. adjust()). example, list(geom_line(), geom_point()) |> blend(\"multiply\") multiply-blend layers together, rather multiply-blending contents two layers individually.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Layer operations — operation-class","text":"show(operation): Print operation. format(operation): Format operation printing.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer operations — operation-class","text":"","code":"# operations can stand alone adjust(aes(color = x)) #> <operation>: adjust(aes(colour = ~x))  # they can also be applied to layers through multiplication or piping geom_line() |> adjust(aes(color = x)) #> mapping: colour = ~x  #> geom_line: na.rm = FALSE, orientation = NA #> stat_identity: na.rm = FALSE #> position_identity  geom_line() * adjust(aes(color = x)) #> mapping: colour = ~x  #> geom_line: na.rm = FALSE, orientation = NA #> stat_identity: na.rm = FALSE #> position_identity   # layer operations act as a small algebra, and can be combined through # multiplication and addition (adjust(fill = \"green\") + 1) * blend(\"multiply\") #> <operation>: (adjust(fill = \"green\") * blend(\"multiply\") + blend(\"multiply\"))"},{"path":"https://mjskay.github.io/ggblend/reference/operation_composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer operation composition — operation_composition","title":"Layer operation composition — operation_composition","text":"operations can composed together form chains operations, multiplied (applied ) layer-like objects, return modified layer-like objects. contrast operation_products, compositions operations distributive sums operations layer-like objects.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_composition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer operation composition — operation_composition","text":"Composition ggblend operations depend types objects multiplied: compose operation operation, merged single operation applies operation sequence, without distributing layers. compose operation layer-like object, operation applied layer, returning new layer-like object. operation applied layer whole, sub-parts (e.g. sub-layers graphical objects).","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_composition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer operation composition — operation_composition","text":"","code":"old_options = options(ggblend.check_blend = FALSE) library(ggplot2)  # composing operations together chains them adjust(color = \"red\") |> blend(\"multiply\") #> <operation>: adjust(colour = \"red\") |> blend(\"multiply\")  # unlike multiplication, composition does not follow the distributive law mult_op = (adjust(aes(y = 11 -x), color = \"skyblue\") + 1) * blend(\"multiply\") mult_op #> <operation>: (adjust(aes(y = ~11 - x), colour = \"skyblue\") * blend(\"multiply\") + blend(\"multiply\"))  comp_op = (adjust(aes(y = 11 -x), color = \"skyblue\") + 1) |> blend(\"multiply\") comp_op #> <operation>: (adjust(aes(y = ~11 - x), colour = \"skyblue\") + 1) |> blend(\"multiply\")  # multiplication by a geom returns a modified version of that geom data.frame(x = 1:10) |>   ggplot(aes(x = x, y = x)) +   geom_line(linewidth = 10, color = \"red\") * comp_op #> Warning: Group definition failed  options(old_options)"},{"path":"https://mjskay.github.io/ggblend/reference/operation_product.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer operation products — operation_product","title":"Layer operation products — operation_product","text":"operations can multiplied together form chains operations, multiplied (applied ) layer-like objects, return modified layer-like objects.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_product.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer operation products — operation_product","text":"","code":"# S4 method for operation,ANY *(e1, e2)  # S4 method for ANY,operation *(e1, e2)  # S4 method for adjust,adjust *(e1, e2)  # S4 method for nop,nop *(e1, e2)  # S4 method for operation,nop *(e1, e2)  # S4 method for operation_sum,nop *(e1, e2)  # S4 method for nop,operation *(e1, e2)  # S4 method for nop,operation_sum *(e1, e2)  # S4 method for operation prod(x, ..., na.rm = FALSE)  # S4 method for operation,operation *(e1, e2)  # S4 method for numeric,operation *(e1, e2)  # S4 method for operation,numeric *(e1, e2)  # S4 method for operation,operation_sum *(e1, e2)  # S4 method for operation_sum,operation *(e1, e2)  # S4 method for operation_sum,operation_sum *(e1, e2)"},{"path":"https://mjskay.github.io/ggblend/reference/operation_product.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer operation products — operation_product","text":"e1 operation, layer-like, numeric() e2 operation, layer-like, numeric() x, ... operations na.rm ignored","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_product.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer operation products — operation_product","text":"Multiplication ggblend operations depends types objects multiplied: multiply operation operation, merged single operation applies operation sequence. multiply operation layer-like object, operation applied layer, returning new layer-like object. multiply operation numeric() n, new operation repeats input operation n times returned.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_product.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer operation products — operation_product","text":"","code":"library(ggplot2)  # multiplying operations by numerics repeats them... adjust(color = \"red\") * 2 #> <operation>: (adjust(colour = \"red\") + adjust(colour = \"red\"))  # multiplying operations together chains (or merges) them adjust(color = \"red\") * adjust(linewidth = 2) #> <operation>: adjust(colour = \"red\", linewidth = 2)  # multiplication obeys the distributive law op = (adjust(aes(y = 11 -x), color = \"skyblue\") + 1) * (adjust(color = \"white\", linewidth = 4) + 1) op #> <operation>: (adjust(aes(y = ~11 - x), colour = \"white\", linewidth = 4) + adjust(aes(y = ~11 - x), colour = \"skyblue\") + adjust(colour = \"white\", linewidth = 4) + 1)  # multiplication by a geom returns a modified version of that geom data.frame(x = 1:10) |>   ggplot(aes(x = x, y = x)) +   geom_line(linewidth = 2) * op"},{"path":"https://mjskay.github.io/ggblend/reference/operation_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer operation sums — operation_sum","title":"Layer operation sums — operation_sum","text":"operations can added together form stacks operations, multiplied (applied ) layer-like objects, layer-like objects distributed operations (.e. copied).","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer operation sums — operation_sum","text":"","code":"# S4 method for operation sum(x, ..., na.rm = FALSE)  # S4 method for operation,operation +(e1, e2)  # S4 method for operation,numeric +(e1, e2)  # S4 method for numeric,operation +(e1, e2)  # S4 method for operation_sum format(x, ...)"},{"path":"https://mjskay.github.io/ggblend/reference/operation_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer operation sums — operation_sum","text":"x, ... operations na.rm ignored e1 operation numeric() e2 operation numeric()","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer operation sums — operation_sum","text":"Addition ggblend operations depends types objects summed: add operation operation, merged single operation copies input layer-like objects, one operation. add operation numeric() n, equivalent adding * nop()s operation.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/operation_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer operation sums — operation_sum","text":"","code":"library(ggplot2)  # adding operations together creates a sum of operations adjust(color = \"red\") + adjust(linewidth = 2) #> <operation>: (adjust(colour = \"red\") + adjust(linewidth = 2))  # addition and multiplication obey the distributive law op = (adjust(aes(y = 11 -x), color = \"skyblue\") + 1) * (adjust(color = \"white\", linewidth = 4) + 1) op #> <operation>: (adjust(aes(y = ~11 - x), colour = \"white\", linewidth = 4) + adjust(aes(y = ~11 - x), colour = \"skyblue\") + adjust(colour = \"white\", linewidth = 4) + 1)  # multiplication by a geom returns a modified version of that geom, # distributed over the sum of the operations data.frame(x = 1:10) |>   ggplot(aes(x = x, y = x)) +   geom_line(linewidth = 2) * op"},{"path":"https://mjskay.github.io/ggblend/reference/partition.html","id":null,"dir":"Reference","previous_headings":"","what":"Partition a layer into subgroups (Layer operation) — partition","title":"Partition a layer into subgroups (Layer operation) — partition","text":"layer operation adding partition aesthetic layer.","code":""},{"path":"https://mjskay.github.io/ggblend/reference/partition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partition a layer into subgroups (Layer operation) — partition","text":"","code":"partition(object, partition)"},{"path":"https://mjskay.github.io/ggblend/reference/partition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partition a layer into subgroups (Layer operation) — partition","text":"object One : layer-like object: applies operation layer. missing argument: creates operation Anything else: creates operation, passing object along partition argument partition One : list quosures, returned vars(), giving (possibly multi-) column expression partition aesthetic. expressions combined using interaction() passed aes(partition = ...) one-sided formula, giving single-column expression partition aesthetic, passed aes_(partition = ...).","code":""},{"path":"https://mjskay.github.io/ggblend/reference/partition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partition a layer into subgroups (Layer operation) — partition","text":"layer-like object (object layer-like) operation ().","code":""},{"path":"https://mjskay.github.io/ggblend/reference/partition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partition a layer into subgroups (Layer operation) — partition","text":"shortcut setting partition aesthetic layer. partition(~ XXX) roughly equivalent adjust(aes(partition = XXX)) partition(vars(X, Y, ...)) roughly equivalent adjust(aes(partition = interaction(X, Y, ...))) layer partition aesthetic used following operations, effects operations applied across groups: blend(): Blends graphical objects within subgroups defined partition together using normal (\"\") blending applying blend subgroups.","code":""},{"path":[]},{"path":[]}]
