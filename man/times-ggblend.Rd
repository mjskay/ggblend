% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggblend-class.R, R/ggblend_stack-class.R
\name{times-ggblend}
\alias{times-ggblend}
\alias{*.ggblend}
\alias{*,ANY,ggblend-method}
\alias{*,ggblend,ANY-method}
\alias{*,ggblend_stack,ANY-method}
\alias{*,ANY,ggblend_stack-method}
\title{Apply a blend to a layer}
\usage{
\S4method{*}{ANY,ggblend}(e1, e2)

\S4method{*}{ggblend,ANY}(e1, e2)

\S4method{*}{ggblend_stack,ANY}(e1, e2)

\S4method{*}{ANY,ggblend_stack}(e1, e2)
}
\arguments{
\item{e1}{One of:
\itemize{
\item a \code{ggplot2::Layer}, such as a \code{geom} or \code{stat}, or a list of layers.
\item a \code{"ggblend"} object as returned by \code{blend()}, \code{stack_blends()}, etc.
}}

\item{e2}{One of:
\itemize{
\item a \code{ggplot2::Layer}, such as a \code{geom} or \code{stat}, or a list of layers.
\item a \code{"ggblend"} object as returned by \code{blend()}, \code{stack_blends()}, etc.
}}
}
\value{
An object that can be added to a \code{\link[=ggplot]{ggplot()}} object:  a \code{ggplot2::Layer} or
a list of \code{ggplot2::Layer}s.
}
\description{
Operator for applying blends: \code{geom_X(...) * blend(...)} is equivalent to \code{geom_X(...) |> blend(...)}.
}
\details{
An algebraic alternative syntax to \code{\link[=stack_blends]{stack_blends()}}. See examples.
}
\examples{
library(ggplot2)

# create two versions of a dataset, where draw order can affect output
set.seed(1234)
df_a = data.frame(x = rnorm(500, 0), y = rnorm(500, 1), set = "a")
df_b = data.frame(x = rnorm(500, 1), y = rnorm(500, 2), set = "b")
df_ab = rbind(df_a, df_b) |>
  transform(order = "draw a then b")
df_ba = rbind(df_b, df_a) |>
  transform(order = "draw b then a")
df = rbind(df_ab, df_ba)

# Using the "darken" blend mode, draw order does not matter:
df |>
  ggplot(aes(x, y, color = set)) +
  geom_point(size = 3) * blend("darken") +
  scale_color_brewer(palette = "Set2") +
  facet_grid(~ order)

# Using the "multiply" blend mode, we can see density within groups:
df |>
  ggplot(aes(x, y, color = set)) +
  geom_point(size = 3) * blend("multiply") +
  scale_color_brewer(palette = "Set2") +
  facet_grid(~ order)

# blend() on a single geom by default blends all grobs in that geom together
# using the requested blend mode. If we wish to blend within specific data
# subsets using normal blending ("over") but between subsets using the
# requested blend mode, we can set the blend_group aesthetic. This will
# make "multiply" behave more like "darken":
df |>
  ggplot(aes(x, y, color = set, blend_group = set)) +
  geom_point(size = 3) * blend("multiply") +
  scale_color_brewer(palette = "Set2") +
  facet_grid(~ order)

# We can also blend lists of geoms together; these geoms are rendered using
# normal ("over") blending (unless a blend() call is applied to a specific
# sub-layer, as in the first layer below) and then blended together using
# the requested blend mode.
df |>
  ggplot(aes(x, y, color = set)) +
  list(
    geom_point(size = 3) * blend("darken"),
    geom_vline(xintercept = 0, color = "gray75", size = 1.5),
    geom_hline(yintercept = 0, color = "gray75", size = 1.5)
  ) * blend("hard.light") +
  scale_color_brewer(palette = "Set2") +
  facet_grid(~ order)

}
\seealso{
Other blending functions and operators: 
\code{\link{blend}},
\code{\link{pow-ggblend}},
\code{\link{stack_blends}()}
}
\concept{blending functions and operators}
